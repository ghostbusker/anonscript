#!/bin/bash

whiptail --title "This is the script you are about to install" --textbox --scrolltext $0 24 78

#preset your main vairaibles here. you will still be promted to change these
SECRETURL="http://YourDNSProvider.com/dynamic/update.php?L0ng5tr1ng0fL33t3rs4ndNumb3r5"
PORT=22                 #port we are opening in the router and enabling our services on
SERVICE=ServiceName     #this is what will show up in the routers' UPNP entry list
TARGET=8.8.8.8          #public ip that responds to pings, proves internet connection
INTERVAL=600            #how frequntly the keepalive script runs/pings
TRIES=5                 #how many failed tries before reboot 

#location of each file being created or modified
DISABLEIPV6="/etc/sysctl.conf"
ANONSCRIPT="/usr/local/bin/anonscript"
ANONSERVICE="/lib/systemd/system/anonscript.service"
KEEPALIVE="/usr/local/bin/keepalive"
KEEPALIVESERVICE="/lib/systemd/system/keepalive.service"

#prompt for dynamic dns SECRETURL
SECRETURL=$(whiptail --inputbox "Enter your dynamic dns update url starting with 'http://'" 8 78 $SECRETURL --title "Dynamic DNS URL" 3>&1 1>&2 2>&3)

#prompt port # to be forwarded using upnp
PORT=$(whiptail --inputbox "Enter the Port number to be added using UPnP" 8 78 $PORT --title "UPnP Port" 3>&1 1>&2 2>&3)

#prompt for TCP or UDP 
PROTOCOL=$(whiptail --radiolist "Which protocol to forward using UPnP" 20 78 2 --title "UPnP Protcol" \
"TCP" "Transmission Control Protocol" ON \
"UDP" "User Datagram Protocol" OFF 3>&1 1>&2 2>&3 )

#prompt for the name of the service that will show up in the UPnP entries/logs
SERVICE=$(whiptail --inputbox "Enter the name that will be seen in the UPnP mapping entry." 8 78 $SERVICE --title "UPnP Service Name" 3>&1 1>&2 2>&3)

#prompt for the IP that will be checked by the keepalive script
TARGET=$(whiptail --inputbox "Ping this IP to check for internet connection." 8 78 $TARGET --title "Target IP" 3>&1 1>&2 2>&3)

#prompt for the lenght of time between ping attempts
INTERVAL=$(whiptail --inputbox "How frequently (in seconds) to test for network connectivity." 8 78 $INTERVAL --title "Interval" 3>&1 1>&2 2>&3)

#prompt for the IP that will be checked by the keepalive script
TRIES=$(whiptail --inputbox "How many failed ping attemps before forcing reboot and identity refresh." 8 78 $TRIES --title "TRIES" 3>&1 1>&2 2>&3)

#update and install neccasary software
sudo apt-get update
echo "macchanger      macchanger/automatically_run    boolean false" | sudo debconf-set-selections #prevents macchnager from prompting durring install
sudo apt-get install macchanger git -y    #install these programs
sudo apt install wamerican    #creates dictionary for random /words in /usr/share/dict
sudo git clone https://github.com/miniupnp/miniupnp   #get the latest version of this program and install it
cd miniupnp/miniupnpc/
sudo make
sudo make install
cd

#setup UPNP
sudo route add -net 239.0.0.0 netmask 255.0.0.0 eth0 
sudo route add -net 239.0.0.0 netmask 255.0.0.0 wlan0

#disable IPv6
#**************************************************************************************
/bin/cat <<EOM1 >$DISABLEIPV6
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
EOM1
#**************************************************************************************

#write anonymizing script
#**************************************************************************************
/bin/cat <<"EOM2" >$ANONSCRIPT
#!/bin/bash

#disable interfaces for modification
sudo ifconfig wlan0 down > /dev/null 2>&1
sudo ifconfig eth0 down > /dev/null 2>&1

#randomize MAC addresses
sudo macchanger -r wlan0 > /dev/null 2>&1
sudo macchanger -r eth0 > /dev/null 2>&1

#randomize hostname
RANDHOST=$(shuf -n1 /usr/share/dict/words) #pic random word from dictionary
HOSTNAME=$(echo $RANDHOST | tr -dc '[:alpha:]') #remove symbols
sudo hostname $HOSTNAME > /dev/null 2>&1	#set hostname
sudo rm /etc/hostname #set hostname again, this time in the /etc/hostname file
echo $HOSTNAME >> /etc/hostname
sudo sed -i '/127.0.1.1/c\127.0.1.1         '"$HOSTNAME" /etc/hosts   #set hostname one more time in /etc/hosts

#remove and regenerate machine-id
sudo rm /etc/machine-id 
sudo systemd-machine-id-setup > /dev/null 2>&1

#re-enable interfaces
sudo ifconfig wlan0 up > /dev/null 2>&1
sudo ifconfig eth0 up > /dev/null 2>&1
exit 0
EOM2
#**************************************************************************************

#write keepalive script
#**************************************************************************************
/bin/cat <<"EOM3" >$KEEPALIVE
#!/bin/bash

#ping to the gateway to make sure we're on the network
GATEWAY=$(sudo ip route | grep "^default" | sed -e 's/.*via \(.*\) dev.*/\1/'^C)
i=0		#initialize counter
while true; do
        /bin/ping -c1 -n $TARGET >/dev/null 2>&1
        [ $? -eq 0 ] && break	                #ping target succesful, exit loop
	/bin/ping -c1 -n $GATEWAY >/dev/null 2>&1
        [ $? -eq 0 ] &&	sleep $INTERVAL		#can reach gateway but not target, sleep an extra interval
        [ i -eq $TRIES ] && sudo reboot	&& exit	#restarting the interfaces didnt work, rebooting
        if [ i -eq ${TRIES-1} ]; then		#try reinitiating interfaces once before rebooting
		sudo ifconfig wlan0 down > /dev/null 2>&1
		sudo ifconfig eth0 down > /dev/null 2>&1
		sleep 5
		sudo ifconfig wlan0 up > /dev/null 2>&1
		sudo ifconfig eth0 up > /dev/null 2>&1
	fi
	i++		#ping unsuccesful, increase counter and try again
	sleep $INTERVAL
done

sudo curl -ks $SECRETURL  > /dev/null 2>&1      #attempt to update dynamic dns using secreturl

#search for upnp mappings on our port, filter response, store as temp
TEMP=$(sudo upnpc -l | grep -e "UDP" -e "TCP" | grep -e "$PORT")
ME=$(echo "$TEMP" | grep -e "$(hostname -I)")
NOTME=$(echo "$TEMP" | grep -v "$(hostname -I)")
CONFLICTING_PROTOCOL=$(echo "$NOTME" | cut -c3-6)
CONFLICTING_SERVICE=$(echo "$NOTME" | cut -d "'" -f 2)

#test mapping info and add entry, delete entry or do nothing
if [ -z "${NOTME}" ]; then
        echo "No conflicting UPNP entry."
else
        echo "Removing conflicting UPNP entry..."
        sudo upnpc -e $CONFLICTING_SERVICE -d $PORT $CONFLICTING_PROTOCOL       #remove conflicting upnp entry 
fi

if [ -z "${ME}" ]; then
        echo "Adding UPNP entry."
        sudo upnpc -e $SERVICE -r $PORT $PROTOCOL   #Add UPNP port mapping for our current IP
else
        echo "UPNP entry for this IP already exists."
fi
sleep $INTERVAL
exit 0
EOM3
#insert these lines AFTER processing arguments
sudo sed -i "2iPORT=$PORT" $KEEPALIVE
sudo sed -i "2iSERVICE=$SERVICE" $KEEPALIVE
sudo sed -i "2iPROTOCOL=$PROTOCOL" $KEEPALIVE
sudo sed -i "2iSECRETURL=$SECRETURL" $KEEPALIVE
sudo sed -i "2iTARGET=$TARGET" $KEEPALIVE
sudo sed -i "2iINTERVAL=$INTERVAL" $KEEPALIVE
sudo sed -i "2iTRIES=$TRIES" $KEEPALIVE
#*************************************************************************************

#create service unit to run anonscript at startup, before network connects
#**************************************************************************************
/bin/cat <<EOM4 >$ANONSERVICE
[Unit]
Description=Run anonscript ASAP
Before=basic.target
After=local-fs.target sysinit.target
DefaultDependencies=no

[Service]
Type=oneshot
ExecStart=$ANONSCRIPT

[Install]
WantedBy=basic.target
EOM4
#**************************************************************************************

#create service unit to run keepalive at all times after network connects
#**************************************************************************************
/bin/cat <<EOM5 >$KEEPALIVESERVICE
[Unit]
Description=Run keepalive whenever network is active
After=network.target

[Service]
Type=simple
ExecStart=$KEEPALIVE
Restart=always

[Install]
WantedBy=multi-user.target
EOM5
#**************************************************************************************

#make each script executable
sudo chmod +x $ANONSCRIPT
sudo chmod +x $KEEPALIVE

#enable newly created services
sudo systemctl daemon-reload
sudo systemctl enable anonscript.service
sudo systemctl enable keepalive.service

#MY *ACTUAL* Purpose
#**************************************************************************************
#listen on EXPOSED UPNP port instead of 22 for ssh
sudo sed -i "$ a\port $PORT" /etc/ssh/sshd_config
touch /boot/ssh
#customize login motd
sudo rm /etc/motd
sudo rm /etc/update-motd.d/10-uname
/bin/cat <<"EOM6" > /etc/update-motd.d/10-uname
#!/bin/sh
echo "Hostname = " $(hostname)
echo "Local IP = " $(hostname -I)
PUBLIC=$(curl https://ipinfo.io/ip) > /dev/null 2>&1
echo "Public IP = " $PUBLIC
EOM6
sudo chmod+x /etc/update-motd.d/10-uname
#**************************************************************************************

echo "script finished" 
