#!/bin/bash

whiptail --title "This is the script you are about to install" --textbox --scrolltext $0 24 78

set -e #exits script if there is an error Used for debugging

#Preset your main vairaibles here. You will still be promted to change
SECRETURL="http://YourDNSProvider.com/dynamic/update.php?L0ng5tr1ng0fL33t3rs4ndNumb3r5"
PORT=22
SERVICE=ServiceName

#Location of each file being created
DISABLEIPV6="/etc/sysctl.conf"
ANONSCRIPT="/usr/local/bin/anonscript"
ANONSERVICE="/lib/systemd/system/anonscript.service"
UPNPDELETESCRIPT="/usr/local/bin/upnpdeletescript"
UPNPDELETE="/lib/systemd/system/upnpdelete.service"
KEEPALIVE="/usr/local/bin/keepalive"

#prompt for dynamic dns SECRETURL
SECRETURL=$(whiptail --inputbox "Enter your dynamic dns update url starting with 'http://'" 8 78 $SECRETURL --title "Dynamic DNS URL" 3>&1 1>&2 2>&3)

#prompt port # to be forwarded using upnp
PORT=$(whiptail --inputbox "Enter the Port number to be added using UPnP" 8 78 $PORT --title "UPnP Port" 3>&1 1>&2 2>&3)

PROTOCOL=$(whiptail --radiolist "Which protocol to forward using UPnP" 20 78 2 --title "UPnP Protcol" \
"TCP" "Transmission Control Protocol" ON \
"UDP" "User Datagram Protocol" OFF 3>&1 1>&2 2>&3 )

#prompt for the name of the service that will show up in the UPnP entries/logs
SERVICE=$(whiptail --inputbox "Enter the name that will be seen in the UPnP mapping entry." 8 78 $SERVICE --title "UPnP Service Name" 3>&1 1>&2 2>&3)

#update and install neccasary software
sudo apt-get update
sudo apt-get install macchanger git -y    #install these programs
sudo apt install wamerican    #creates dictionary for random /words in /usr/share/dict
sudo git clone https://github.com/miniupnp/miniupnp   #get the latest version of this program and install it
cd miniupnp/miniupnpc/
sudo make
sudo make install
cd

#setup UPNP
sudo route add -net 239.0.0.0 netmask 255.0.0.0 eth0 > /dev/null 2>&1     #added /dev/null cause sometimes these throw errors
sudo route add -net 239.0.0.0 netmask 255.0.0.0 wlan0 > /dev/null 2>&1

#disable IPv6
#**************************************************************************************
/bin/cat <<EOM1 >$DISABLEIPV6
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
EOM1
#**************************************************************************************

#write anonymizing script
#**************************************************************************************
/bin/cat <<"EOM2" >$ANONSCRIPT
#!/bin/bash

#disable interfaces for modification
sudo ifconfig wlan0 down > /dev/null 2>&1
sudo ifconfig eth0 down > /dev/null 2>&1

#randomize MAC addresses
sudo macchanger -r wlan0 > /dev/null 2>&1
sudo macchanger -r eth0 > /dev/null 2>&1

#randomize hostname
RANDHOST=$(shuf -n1 /usr/share/dict/words) #pic random word from dictionary
HOSTNAME=$(echo $RANDHOST | tr -dc '[:alpha:]') #remove symbols
sudo hostname $HOSTNAME > /dev/null 2>&1	#set hostname
sudo rm /etc/hostname #set hostname again, this time in the /etc/hostname file
echo $HOSTNAME >> /etc/hostname
sudo sed -i '/127.0.1.1/c\127.0.1.1         '"$HOSTNAME" /etc/hosts   #set hostname one more time in /etc/hosts

#remove and regenerate machine-id
sudo rm /etc/machine-id 
sudo systemd-machine-id-setup > /dev/null 2>&1

#re-enable interfaces
sudo ifconfig wlan0 up > /dev/null 2>&1
sudo ifconfig eth0 up > /dev/null 2>&1
exit 0
EOM2
#**************************************************************************************

#write keepalive script
#**************************************************************************************
/bin/cat <<EOM3 >$KEEPALIVE
#!/bin/bash
sudo $UPNPDELETESCRIPT
sudo curl -ks $SECRETURL  > /dev/null 2>&1
sudo upnpc -e $SERVICE -r $PORT $PROTOCOL   #use service name as red herring
EOM3
sudo crontab -l | { cat; echo "*/5 * * * * /bin/bash $KEEPALIVE"; } | sudo crontab -    #run every 5 minutes
#**************************************************************************************

#write upnpdelete script
#**************************************************************************************
/bin/cat <<"EOM4" >$UPNPDELETESCRIPT
#!/bin/bash

TEMP=$(sudo upnpc -l | grep -e "UDP" -e "TCP" | grep -e "$PORT" | grep -v "$(hostname -I)")
if [ -z "${TEMP}" ]; then       # exit script here if no conflicts found       
        exit 0
fi
PROTOCOL=$(echo $TEMP | cut -c3-6)
SERVICE=$(echo $TEMP | cut -d "'" -f 2)
sudo upnpc -e $SERVICE -d $PORT $PROTOCOL

EOM4
sudo sed -i "3iPORT=$PORT" $UPNPDELETESCRIPT    #insert this line AFTER processing arguments
#*************************************************************************************

#create service unit to run anonscript at startup, before network connects
#**************************************************************************************
/bin/cat <<EOM5 >$ANONSERVICE
[Unit]
Description=Run anonscript ASAP
Before=basic.target
After=local-fs.target sysinit.target
DefaultDependencies=no

[Service]
Type=oneshot
ExecStart=$ANONSCRIPT

[Install]
WantedBy=basic.target
EOM5
#**************************************************************************************

#Create service unit to delete existing upnp port mapping from router before shutdown
#*************************************************************************************
/bin/cat <<EOM6 >$UPNPDELETE
[Unit]
Description=Delete UPnP Port Mapping
#DefaultDependencies=no
#Before=shutdown.target reboot.target halt.target

[Service]
Type=oneshot
RemainAfterExit=true
ExecStart=/bin/true
ExecStop=$UPNPDELETESCRIPT  #attempt to remove existing upnp mapping

[Install]
WantedBy=multi-user.target
#WantedBy=halt.target reboot.target shutdown.target
EOM6
#**************************************************************************************

#make each script executable
sudo chmod +x $ANONSCRIPT
sudo chmod +x $KEEPALIVE
sudo chmod +x $UPNPDELETESCRIPT

#enable newly created services
sudo systemctl daemon-reload
sudo systemctl enable anonscript.service
sudo systemctl enable upnpdelete.service

#MY *ACTUAL* SERVICE
#**************************************************************************************
#listen on port 2222 instead of 22 for ssh
sudo sed -i "$ a\port $PORT" /etc/ssh/sshd_config
touch /boot/ssh
#**************************************************************************************

echo "script finished" 
