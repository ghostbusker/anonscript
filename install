P!/bin/bash

#set -e #exits script if there is an error Used for debugging

#update and install neccasary software
sudo apt-get update
#sudo apt-get upgrade -y    #slows things down too much
sudo apt-get install macchanger -y    #changes MAC addresses

#sudo apt-get install miniupnpc -y    #opens UPNP ports
#Lets get the latest version instead!
sudo apt-get install git
sudo git clone https://github.com/miniupnp/miniupnp
cd miniupnp/miniupnpc/
sudo make
sudo make install
cd

sudo apt install wamerican    #creates dictionary for random /words in /usr/share/dict

#prompt for dynamic dns SECRETURL
echo "Enter your dynamic dns update url starting with 'http://'"
read SECRETURL    # ***YourSecretURLfromYourDNSproviderGoesHere***

#prompt port # to be forwarded using upnp
echo "Enter port that you want to forward using upnp"
read PORT   #***YourDesiredPortNumberGoesHere***

#which protocol for the pinhole?
echo "Which protocol> UDP or TCP? Type one:"
read protocol
#prompt for the name of the service that will show up in the UPnP entries/logs
echo "Enter name of service for UPnP entry"
read SERVICE

#Location of each file being created
DISABLEIPV6="/etc/sysctl.conf"
ANONSCRIPT="/usr/local/bin/anonscript"
ANONSERVICE="/lib/systemd/system/anonscript.service"
KEEPALIVE="/usr/local/bin/keepalive"

#setup UPNP
#sudo upnpc ppp0 eth0 #this is causting trouble
sudo route add -net 239.0.0.0 netmask 255.0.0.0 eth0
sudo route add -net 239.0.0.0 netmask 255.0.0.0 wlan0

#disable IPv6
#**************************************************************************************
/bin/cat <<EOM1 >$DISABLEIPV6
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
EOM1
#**************************************************************************************

#write anonymizing script
#**************************************************************************************
/bin/cat <<"EOM2" >$ANONSCRIPT
#!/bin/bash

sudo upnpc -e $SERVICE -r $PORT $PROTOCALL    #attempt to remove existing upnp mapping before IP changes

#disable interfaces for modification
sudo ifconfig wlan0 down
sudo ifconfig eth0 down

#randomize MAC addresses
sudo macchanger -r wlan0
sudo macchanger -r eth0

#randomize hostname
RANDHOST=$(shuf -n1 /usr/share/dict/words) #pic random word from dictionary ##THIS BREAKS
HOSTNAME=$(echo $RANDHOST | tr -dc '[:alpha:]') #remove symbols ##THIS BREAKS
sudo hostname $HOSTNAME	#set hostname

sudo rm /etc/hostname #set hostname again, this time in the /etc/hostname file
echo $HOSTNAME >> /etc/hostname

sudo rm /etc/machine-id #remove and regenerate machine-id
sudo systemd-machine-id-setup

#re-enable interfaces
sudo ifconfig wlan0 up
sudo ifconfig eth0 up
EOM2
#**************************************************************************************

#make anonymizing script executable
sudo chmod +x $ANONSCRIPT

#create service unit to run anonscript at startup, before network connects
#**************************************************************************************
/bin/cat <<EOM3 >$ANONSERVICE

[Unit]
Description=Run anonscript ASAP
Before=basic.target
After=local-fs.target sysinit.target
DefaultDependencies=no

[Service]
Type=oneshot
ExecStart=$ANONSCRIPT

[Install]
WantedBy=basic.target
EOM3
#**************************************************************************************

#enable newly created service
sudo systemctl daemon-reload
sudo systemctl enable anonscript.service

#write keepalive script
#**************************************************************************************
/bin/cat <<EOM4 >$KEEPALIVE

sudo curl -ks $SECRETURL  > /dev/null 2>&1
sudo upnpc -e $SERVICE -r $PORT $PROTOCALL  > /dev/null 2>&1   #used service name E911 as red herring
EOM4
#**************************************************************************************

#make keepalive script executable
sudo chmod +x $KEEPALIVE

#use crontab to run the KEEPALIVE script every 5 minutes
sudo crontab -l | { cat; echo "*/5 * * * * $KEEPALIVE"; } | sudo crontab -

#MY *ACTUAL* SERVICE
#**************************************************************************************
#listen on port 2222 instead of 22 for ssh
sudo sed -i '$ a\port 2222' /etc/ssh/sshd_config
#**************************************************************************************

#echo "script finished succesfully"
echo "script finished"    #leave em guessing
